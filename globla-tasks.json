# GitHub Task Management Setup Guide

## 🚀 **Quick Setup for Goddess Karo**

### **Step 1: Create GitHub Repository**
1. Go to [GitHub.com](https://github.com)
2. Click "New Repository"
3. Name it: `tasks` (or `goddesskaro-tasks`)
4. Make it **Public** (so extensions can access it)
5. Add a README file

### **Step 2: Create Folder Structure**
Create these folders and files in your repository:

```
your-repo/
├── tasks/
│   ├── global-tasks.json
│   ├── daily-tasks.json
│   ├── tribute-goals.json
│   ├── challenges.json
│   └── announcements.json
├── subs/
│   └── (individual sub files go here)
└── config/
    └── settings.json
```

### **Step 3: Upload Initial Files**
Copy the example files I created:
- `example-global-tasks.json` → `tasks/global-tasks.json`
- `example-announcements.json` → `tasks/announcements.json`
- `example-settings.json` → `config/settings.json`

### **Step 4: Update Extension**
The extension code is already updated with GitHub sync! When your subs install the updated extension, it will automatically:
- Generate a unique sub ID
- Sync tasks from your GitHub repo every 5 minutes
- Show notifications when new tasks are added

## 📝 **How to Add Tasks**

### **Method 1: GitHub Web Interface**
1. Go to your repository on GitHub
2. Navigate to `tasks/global-tasks.json`
3. Click the "Edit" button (pencil icon)
4. Add your new task to the tasks array:

```json
{
  "id": "task-004",
  "title": "Special Assignment",
  "description": "Your detailed task description here",
  "type": "behavior",
  "deadline": "2025-07-15T18:00:00Z",
  "priority": "high",
  "reward": "Special recognition",
  "createdAt": "2025-07-11T16:00:00Z"
}
```

5. Update the "lastUpdated" timestamp at the top
6. Click "Commit changes"
7. All subs get the task within 5 minutes!

### **Method 2: GitHub Desktop/Git**
If you prefer using Git:
1. Clone your repository
2. Edit JSON files locally
3. Commit and push changes
4. Tasks sync automatically

## 🎯 **Task Types & Examples**

### **Daily Tasks** (recurring)
```json
{
  "id": "daily-001",
  "title": "Morning Tribute",
  "description": "Send $25 tribute every morning",
  "type": "tribute",
  "amount": 25.00,
  "deadline": "daily-09:00",
  "priority": "high",
  "reward": "Good morning acknowledgment"
}
```

### **One-time Tasks**
```json
{
  "id": "task-005",
  "title": "Weekend Challenge",
  "description": "Complete all assigned tasks this weekend",
  "type": "challenge",
  "deadline": "2025-07-14T23:59:59Z",
  "priority": "urgent",
  "reward": "Special content access"
}
```

### **Tribute Goals**
```json
{
  "id": "tribute-001",
  "title": "Weekly Tribute Goal",
  "description": "Reach $100 in tributes this week",
  "type": "tribute",
  "amount": 100.00,
  "deadline": "2025-07-18T23:59:59Z",
  "priority": "high",
  "reward": "Weekly praise and recognition"
}
```

## 📢 **Announcements**
Use `tasks/announcements.json` for:
- New rules or changes
- Special events
- Motivational messages
- Challenges

```json
{
  "id": "ann-003",
  "title": "New Challenge",
  "message": "This month's challenge: Double your usual tribute amount. Those who succeed get exclusive content.",
  "type": "challenge",
  "priority": "urgent",
  "createdAt": "2025-07-11T16:00:00Z",
  "expiresAt": "2025-08-01T00:00:00Z"
}
```

## 👥 **Individual Sub Management**
Create files in `subs/` folder for personalized tasks:

### **File: `subs/sub-abc123.json`**
```json
{
  "lastUpdated": "2025-07-11T16:00:00Z",
  "subId": "sub-abc123",
  "personalTasks": [
    {
      "id": "personal-001",
      "title": "Personal Assignment",
      "description": "You've been chosen for a special task because of your dedication...",
      "type": "challenge",
      "priority": "urgent",
      "deadline": "2025-07-12T18:00:00Z",
      "reward": "Personal attention and praise"
    }
  ]
}
```

## 🔧 **Technical Details**

### **Sync Frequency**
- Extension checks for updates every 5 minutes
- Manual sync available via "Sync Tasks" button
- Updates triggered on extension startup

### **Data Flow**
1. You edit JSON files on GitHub
2. Extensions fetch updates via GitHub's raw file URLs
3. New tasks appear in subs' extensions automatically
4. Completion data stays local (privacy maintained)

### **File URLs**
Your files will be accessible at:
- `https://raw.githubusercontent.com/yourusername/tasks/main/tasks/global-tasks.json`
- `https://raw.githubusercontent.com/yourusername/tasks/main/tasks/announcements.json`
- etc.

## 🛡️ **Privacy & Security**

### **What's Shared**
- Tasks and announcements (public repo)
- General settings and configurations

### **What's Private**
- Individual sub completion data
- Personal information
- Tribute amounts and history
- Journal entries

### **Sub Privacy**
- Each sub gets a random ID (like "sub-abc123")
- No personal information transmitted
- All personal data stays on their device

## 🎨 **Advanced Features**

### **Conditional Tasks**
You can create tasks that only show for certain conditions:
```json
{
  "id": "weekend-task",
  "title": "Weekend Special",
  "description": "Weekend-only task",
  "type": "behavior",
  "showCondition": "weekend",
  "priority": "medium"
}
```

### **Task Expiration**
Tasks can automatically expire:
```json
{
  "expiresAt": "2025-07-20T00:00:00Z"
}
```

### **Reward Tiers**
Different rewards based on completion time:
```json
{
  "rewards": {
    "early": "Special praise for early completion",
    "onTime": "Good job completing on time",
    "late": "Acceptable, but do better next time"
  }
}
```

## 💡 **Tips for Success**

1. **Start Small**: Begin with 1-2 simple tasks
2. **Be Consistent**: Regular updates keep subs engaged
3. **Use Announcements**: Keep subs informed of changes
4. **Test Changes**: Preview JSON files before committing
5. **Monitor Activity**: Check which tasks are being completed

## 🚀 **Ready to Deploy**

1. Create your GitHub repository
2. Upload the example files
3. Update the extension with your repository URL
4. Distribute the updated extension to your subs
5. Start managing tasks from GitHub!

Your subs will love the seamless experience of receiving tasks automatically while you maintain complete control from your GitHub repository.

---

**This system gives you the power to manage unlimited subs with zero server costs, complete privacy, and professional-grade reliability through GitHub's infrastructure.**
